{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Massage/MassageItem.tsx","components/Dialogs/MessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","name","path","id","className","s","dialog","active","to","DialogItem","props","dialogElement","dialogsData","map","dialogs","dialogItems","Message","text","massages","MassageItem","massageElement","massageData","massage","key","maxLength100","maxLengthCreator","MessageFormRedux","reduxForm","form","handleSubmit","onSubmit","myCreateField","required","Dialogs","sendMassageCreator","data","newMassageBody","compose","connect","state","dialogPage","action","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAjND,EAAOC,QAAU,CAAC,QAAU,wBAAwB,YAAc,4BAA4B,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,iHCQtMC,EAAS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KACTC,EAAO,YADgC,EAAxBC,GAEnB,OAAQ,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACvC,kBAAC,IAAD,CAASC,GAAIN,GAAb,IAAqBD,EAArB,OAoBOQ,MAbf,SAAoBC,GAChB,IAAIC,EAAgBD,EAAME,YAAYC,KAClC,SAACP,GAAD,OAA6B,kBAAC,EAAD,CAAQL,KAAMK,EAAOL,KAAME,GAAIG,EAAOH,QAEvE,OAEI,yBAAKC,UAAWC,IAAES,SACd,yBAAKV,UAAWC,IAAEU,aACbJ,KClBjB,SAASK,EAAQN,GAA0B,IAClCO,EAAQP,EAARO,KACL,OACI,yBAAKb,UAAWC,IAAEa,UACbD,GAiBEE,MAVf,SAAqBT,GAA8B,IAE3CU,EADgBV,EAAfW,YAC4BR,KAC7B,SAAAS,GAAO,OAAI,kBAACN,EAAD,CAASO,IAAKD,EAAQnB,GAAIc,KAAMK,EAAQL,UACvD,OAAQ,yBAAKb,UAAWC,IAAEa,UACjBE,I,yBCnBPI,EAAcC,YAAiB,KCGrC,IAAMC,EAAmBC,YAA+B,CACpDC,KAAM,WADeD,EDClB,SAAqBjB,GAAgD,IACnEmB,EAAgBnB,EAAhBmB,aACL,OAAO,0BAAMC,SAAUD,GAClBE,YAAqC,eAAgB,iBAAkB,CAACC,IAAUR,GAAe,YAClG,qDCgBOS,MAbf,SAAiBvB,GAA0B,IAClCE,EAAgDF,EAAhDE,YAAaS,EAAmCX,EAAnCW,YAAaa,EAAsBxB,EAAtBwB,mBAI/B,OACI,yBAAK9B,UAAWC,IAAES,SACd,6BAAK,kBAAC,EAAD,CAAYF,YAAaA,KAC9B,6BAAK,kBAAC,EAAD,CAAaS,YAAaA,KAC/B,kBAACK,EAAD,CAAkBI,SAPX,SAACK,GACZD,EAAmBC,EAAKC,qB,wBCSjBC,sBACXC,aATkB,SAACC,GACnB,MAAO,CACH3B,YAAa2B,EAAMC,WAAW5B,YAC9BS,YAAakB,EAAMC,WAAWnB,eAMT,CAACa,mBAAmBO,IAAOP,qBACpDQ,IAFWL,EAZf,SAA6B3B,GACzB,OAAO,kBAAC,EAAYA","file":"static/js/3.0789dde3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I1cZd\",\"dialogItems\":\"Dialogs_dialogItems__1xGe2\",\"dialog\":\"Dialogs_dialog__36lR3\",\"active\":\"Dialogs_active__1CyWw\",\"massages\":\"Dialogs_massages__1mR0K\",\"message\":\"Dialogs_message__3ENIK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__1YxgZ\",\"dialogItems\":\"Dialog_dialogItems__1-YHS\",\"dialog\":\"Dialog_dialog__2txew\",\"active\":\"Dialog_active__3nWII\",\"massages\":\"Dialog_massages__O-u5z\",\"message\":\"Dialog_message__14K6o\"};","import React from 'react';\r\nimport s from \"./Dialog.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType ={\r\n    id: number\r\n    name:string\r\n}\r\n\r\nconst Dialog = ({name, id}:DialogPropsType) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return (<div className={s.dialog + \" \" + s.active}>\r\n        <NavLink to={path}> {name} </NavLink>\r\n    </div>)\r\n};\r\ntype DialogItemPropsType = {\r\n    dialogsData: Array<DialogPropsType>\r\n}\r\n\r\nfunction DialogItem(props: DialogItemPropsType) {\r\n    let dialogElement = props.dialogsData.map(\r\n        (dialog: DialogPropsType) => <Dialog name={dialog.name} id={dialog.id}/>\r\n    );\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogElement}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\n\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {MassageDataType} from \"../DialogsContainer\";\r\n\r\ntype MessagePropsType= {\r\n    text:string\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    let {text} = props;\r\n    return (\r\n        <div className={s.massages}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MassageItemPropsType= {massageData:MassageDataType}\r\n\r\nfunction MassageItem(props: MassageItemPropsType) {\r\n    let {massageData} = props;\r\n    let massageElement = massageData.map(\r\n        massage => <Message key={massage.id} text={massage.text}/>)\r\n    return (<div className={s.massages}>\r\n            {massageElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MassageItem;","import React from \"react\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {myCreateField} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utilits/validators/validators\";\r\nimport {MassageFormDataType} from \"./Dialogs\";\r\n\r\nconst maxLength100 =maxLengthCreator(100);\r\n\r\ntype LoginFormDataTypeKeys = Extract<keyof MassageFormDataType, string>\r\n\r\nexport function MessageForm(props: InjectedFormProps<MassageFormDataType>) {\r\n    let {handleSubmit} = props;\r\n    return <form onSubmit={handleSubmit}>\r\n        {myCreateField<LoginFormDataTypeKeys>(\"Your massage\", \"newMassageBody\", [required, maxLength100], \"Textarea\",)}\r\n        <button> Send massage</button>\r\n    </form>\r\n}","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./Dialog/DialogItem\";\r\nimport MassageItem from \"./Massage/MassageItem\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {MessageForm} from \"./MessageForm\";\r\n\r\n\r\nconst MessageFormRedux = reduxForm<MassageFormDataType>({\r\n    form: 'massage'\r\n})(MessageForm);\r\n\r\nexport type MassageFormDataType = {\r\n    newMassageBody: string\r\n}\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    let {dialogsData, massageData, sendMassageCreator} = props;\r\n    let onSubmit = (data: MassageFormDataType) => {\r\n        sendMassageCreator(data.newMassageBody);\r\n    };\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div><DialogItem dialogsData={dialogsData}/></div>\r\n            <div><MassageItem massageData={massageData}/></div>\r\n            <MessageFormRedux onSubmit={onSubmit}/>\r\n        </div>)\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n","import {action} from \"../../Redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\nexport type MassageDataType = Array<{id: number, text: string}>\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsData: Array<{id:number; name: string}>\r\n    massageData: MassageDataType\r\n    sendMassageCreator: (massage:string)=>void\r\n}\r\n\r\n\r\nfunction DialogsContainerAPI(props: DialogsPropsType) {\r\n    return <Dialogs {...props}/>\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dialogsData: state.dialogPage.dialogsData,\r\n        massageData: state.dialogPage.massageData,\r\n    }\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMassageCreator:action.sendMassageCreator}),\r\n    withAuthRedirect\r\n)\r\n(DialogsContainerAPI)\r\n\r\n"],"sourceRoot":""}