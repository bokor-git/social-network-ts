{"version":3,"sources":["components/Posts/PostsItem/PostItem.module.css","hoc/AuthRedirect.tsx","Redux/dialog-reducer.ts","components/Category/Category.module.css","components/common/Conponents/hourglass.module.css","components/News/News.module.css","components/MyEvents/MyEvent.module.css","components/Events/Events.module.css","components/common/FormsControls/FormsControls.tsx","components/Header/Header.module.css","api/api.ts","api/profile-api.ts","Redux/profile-reducer.ts","components/Profile-menu/Profile.tsx","components/Category/Category.tsx","api/users-api.ts","Redux/users-reducer.ts","components/Users/User.tsx","components/Users/Users.tsx","components/common/Conponents/Loading.tsx","Redux/users-selectors.ts","components/Users/Pagenation.tsx","components/Users/UsersContainer.tsx","components/Users/UserProfile/ProfileDataForm.tsx","components/Users/UserProfile/UserProfileInfo.tsx","components/Users/UserProfile/UserProfileStatusHooks.tsx","Redux/posts-reducer.ts","components/Posts/PostsItem/PostItem.tsx","components/Posts/PostsItem/PostItemContainer.tsx","components/Users/UserProfile/UserProfile.tsx","components/Users/UserProfile/UserProfileContainer.tsx","components/News/News.tsx","components/News/NewsContainer.tsx","components/Events/Event/EventsItems.tsx","Redux/events-reducer.ts","components/Events/Event/EventHeader.tsx","components/Events/Event/EventFilter.tsx","components/Events/EventContainer.tsx","components/MyEvents/MyEventItem.tsx","components/MyEvents/MyEventContainer.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","Redux/auth-reducer.ts","components/Header/HeaderConteiner.tsx","components/Login/Login.tsx","Redux/app-reducer.ts","Redux/news-reducer.ts","Redux/redux-store.ts","components/Store/Store.tsx","hoc/Suspense.tsx","App.tsx","serviceWorker.js","index.tsx","components/Users/Users.module.css","utilits/validators/validators.ts","components/common/FormsControls/FormsControls.module.css","components/Users/UserProfile/UserProfile.module.css","components/Profile-menu/Profile.module.css"],"names":["module","exports","mapStateToPropsAuth","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","action","sendMassageCreator","massage","type","initialState","massageData","id","text","dialogsData","name","dialogReducer","myCreateField","placeholder","validators","component","validate","ResponseResultCode","instance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","profileData","actions","photos","getProfileInfo","dispatch","a","myProfileReducer","Profile","this","userID","className","s","src","small","activeClassName","active","React","Component","ProfileContainer","myProfilePage","Category","category","userAPI","currentPage","pageSize","response","delete","post","followSuccess","unfollowSuccess","setUsers","users","setCurrentPage","setTotalUsersCount","totalCount","toggleFetching","isFetching","toggleFollowingProgress","totalUsersCount","followingInProgress","_followUnfollowFlow","dispatchMethod","resultCode","Success","usersReducer","map","u","followed","filter","User","follow","unfollow","user","exact","alt","Button","variant","color","disabled","some","onClick","Users","key","Loading","style","ldshourglass","getUsersSuper","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UserPagesCount","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","border","p","selected","pageNumber","e","UsersAPIComponent","getUsersThunkCreator","compose","items","ProfileDataFormRedux","reduxForm","form","handleSubmit","error","summaryError","Object","keys","contacts","ProfileData","isOwner","goToEditMode","fullName","lookingForAJobDescription","lookingForAJob","Contacts","contactTitle","contactValue","UserProfileInfo","editMode","setEditMode","onSubmit","saveProfile","avatarPhoto","large","onChange","target","files","length","savePhoto","initialValues","UserProfileStatusHooks","setStatus","useEffect","onDoubleClick","autoFocus","currentTarget","value","onBlur","updateProfileStatus","postID","postData","postText","postLike","postAvatar","newPostText","postsReducer","newPost","maxLength10","maxLengthCreator","ReduxPostForm","required","PostItem","postLikeThunk","addPostThunk","deletePost","postElement","Post","PostContainer","postPage","UserProfile","getProfileStatus","MyProfileContainerAPI","match","params","authUserId","history","refreshProfile","prevProps","prevState","console","log","file","getState","stopSubmit","_error","messages","Promise","reject","withRouter","News","newsData","news","n","title","NewsContainer","newsPage","Item","poster","addEvent","Paper","elevation","margin","padding","FullMarathonsItems","eventData","eventItem","ev","Marathons5kmItems","Marathons10kmItems","HalfMarathonsItems","AllEventsItems","eventID","evText","clean","myEvents","eventsReducer","EventHeader","eventHeader","EventFilter","eventFilter","min","max","step","EventContainer","eventPage","eventContent","path","render","MyEventItem","cleanThunk","event","MyEventContainer","HeaderMenu","search","menu","Header","login","singOutThunk","header","headerText","authAPI","email","password","captcha","securityAPI","captchaUrl","getAuthUserData","meData","getCaptchaUrl","url","authReducer","HeaderContainer","maxLength40","ReduxLoginForm","undefined","connectedUsersAPIComponent","singInThunk","loginData","CaptchaIsRequired","Email","Password","rememberMe","initialized","appReducer","newsReducer","rootReducers","combineReducers","dialogPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","Calc","DialogsContainer","lazy","SuspendedDialog","fallback","App","catchAllUnhandledErrors","alert","reason","initializeApp","addEventListener","removeEventListener","from","UserProfileContainer","UsersContainer","AppContainer","SocialNetworkApp","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","maxLength"],"mappings":"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","file":"static/js/main.a6127eb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"PostItem_post__DO6EV\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsAuth = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\ntype MapStateToProps = ReturnType<typeof mapStateToPropsAuth>\r\n\r\nfunction withAuthRedirect<WCP>  (WrappedComponent:React.ComponentType<WCP>)  {\r\n    const RedirectComponent:React.FC<MapStateToProps>=(props)=> {\r\n        let{isAuth, ...restProps}= props\r\n        if (props.isAuth === false) return <Redirect to={\"/Login\"}/>\r\n        return <WrappedComponent {...restProps as unknown as WCP}/>\r\n    }\r\n\r\n    let ConectedAuthRedirectComponent = connect<MapStateToProps,{},WCP,AppStateType>(mapStateToPropsAuth, {})(RedirectComponent);\r\n    return ConectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect","import {InferActionTypes} from \"./redux-store\";\r\n\r\nexport const action = {\r\n    sendMassageCreator: (massage:string) => ({type: \"SEND_MASSAGE\", massage :massage} as const)\r\n}\r\n\r\n\r\nlet initialState = {\r\n    massageData: [\r\n        {id: 1, text: \"Yo, get up\"},\r\n        {id: 2, text: \"How are you\"},\r\n        {id: 3, text: \"Yo, get up\"}],\r\n    dialogsData: [\r\n        {id: 1, name: \"Bohdan\"},\r\n        {id: 2, name: \"Florian\"},\r\n        {id: 3, name: \"Robert\"}],\r\n}\r\ntype InitialStateType= typeof initialState\r\n\r\ntype ActionType = InferActionTypes<typeof action>\r\nconst dialogReducer = (state = initialState, action:ActionType) => {\r\n    switch (action.type) {\r\n        case \"SEND_MASSAGE\": {\r\n            return {\r\n                ...state,\r\n                massageData: [...state.massageData, {id: 6, text: action.massage} ]\r\n            };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default dialogReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"category\":\"Category_category__21Y1L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldshourglass\":\"hourglass_ldshourglass__38xUy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"News_profile__27w1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"event\":\"MyEvent_event__1xJGc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"eventItem\":\"Events_eventItem__3HTHs\",\"eventContent\":\"Events_eventContent__2x0rp\",\"eventHeader\":\"Events_eventHeader__3pIpT\",\"eventFilter\":\"Events_eventFilter__3Xs_p\",\"active\":\"Events_active__JgLGW\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utilits/validators/validators\";\r\n\r\n\r\ntype FormsControlsPropsType = {\r\n    meta: WrappedFieldMetaProps,\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const FormControl:React.FC<FormsControlsPropsType> = ({meta:{touched, error}, children}:FormsControlsPropsType) => {\r\n    const hasError = touched && error\r\n    return <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n        <div>{children}</div>\r\n        {hasError && <span>{error}</span>}\r\n\r\n    </div>\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props)=>{\r\nconst {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}  > <textarea{...input} {...restProps}/> </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props)=>{\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}  > <input{...input} {...restProps}/> </FormControl>\r\n}\r\n\r\nexport function myCreateField<FormKeysType extends string> (placeholder: string | undefined,\r\n                              name:FormKeysType,\r\n                              validators:Array<FieldValidatorType>,\r\n                              component:string | React.Component | React.FC,\r\n                              props={},\r\n                              text=\" \") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__q-0oV\",\"headerText\":\"Header_headerText__2RZQp\",\"login\":\"Header_login__1pTLq\",\"search\":\"Header_search__1JjKf\",\"active\":\"Header_active__29ndQ\",\"menu\":\"Header_menu__3bLiA\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"0ec4be5c-05ae-403f-b660-0e7e553f2d34\"\r\n    }\r\n})\r\n\r\nexport type GetUserType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\n\r\n\r\nexport enum ResponseResultCode {\r\n    Success=0,\r\n    Error = 1,\r\n    CaptchaIsRequired=10\r\n\r\n}\r\n\r\nexport type ResponseData<D={}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n\r\n","import {PhotosType, ProfileDataType} from \"../types/types\";\r\nimport {instance, ResponseData} from \"./api\";\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: number | null) => {\r\n        return instance.get<ProfileDataType>(`profile/` + userId).then(res=>res.data)\r\n    },\r\n    getStatus: (userId: number) => {\r\n        return instance.get<string>(`/profile/status/${userId}`).then(res=>res.data)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put<ResponseData<{}>>(`/profile/status`, {status})\r\n    },\r\n    savePhoto: (photoFile: File) => {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ResponseData<{ photos: PhotosType }>>(`/profile/photo`, formData, {\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    saveProfile: (profile: ProfileDataType) => {\r\n        return instance.put<ResponseData<{}>>(`/profile/`, profile)\r\n    }\r\n};","import {ResponseResultCode} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, ProfileDataType} from \"../types/types\"\r\nimport { BaseThunkType, InferActionTypes} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\n\r\n\r\nlet initialState = {\r\n    profileData: null as null | ProfileDataType,\r\n    status: \" \" as \" \" | string\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const actions = {\r\n    setProfileDate: (profileData: ProfileDataType) => ({type: \"SET_USER_PROFILE\", profileData: profileData} as const),\r\n    setStatusProfile: (status: string) => ({type: \"SET_STATUS_PROFILE\", status: status} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos: photos} as const)\r\n}\r\n\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nconst myProfileReducer = (state = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profileData: action.profileData\r\n            }\r\n        }\r\n        case \"SET_STATUS_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SAVE_PHOTO_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                profileData: {...state.profileData, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes|FormAction>\r\n\r\nexport const getProfileInfo = (userId: number | null): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setProfileDate(data))\r\n\r\n};\r\n\r\nexport const getProfileStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatusProfile(data))\r\n\r\n};\r\n\r\n\r\nexport const updateProfileStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === ResponseResultCode.Success)\r\n            dispatch(actions.setStatusProfile(status))\r\n    } catch (error) {\r\n        console.log(error.response.status);\r\n    }\r\n};\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === ResponseResultCode.Success) {\r\n        dispatch(actions.savePhotoSuccess(response.data.data.photos))\r\n    }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileDataType): ThunkType => async (dispatch, getState) => {\r\n    let userId = getState().auth.userID;\r\n    const response = await profileAPI.saveProfile(profile);\r\n    if (response.data.resultCode === ResponseResultCode.Success) {\r\n        dispatch(getProfileInfo(userId))\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport default myProfileReducer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileInfo} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype mapDispatchToPropsType =  {\r\n    getProfileInfo: (userID:number|null)=>void\r\n}\r\n\r\ntype ProfilePropsType= mapStateToPropsType&mapDispatchToPropsType\r\n\r\nclass Profile extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        this.props.getProfileInfo(this.props.userID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <h3>Profile menu</h3>\r\n                {this.props.isAuth&&this.props.profileData!=null?\r\n                    <img src={this.props.profileData.photos?.small} /> :\r\n                    <img src=\"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"/>\r\n                }\r\n                <h4><NavLink to=\"/Dialogs\" activeClassName={s.active}>My Dialogs</NavLink></h4>\r\n                <h4><NavLink to=\"/Posts\" activeClassName={s.active}>My Posts</NavLink></h4>\r\n                <h4><NavLink to=\"/Profile\" activeClassName={s.active}>Profile</NavLink></h4>\r\n            </div>)\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        // @ts-ignore\r\n        profileData: state.myProfilePage.profileData,\r\n        isAuth: state.auth.isAuth,\r\n        userID: state.auth.userID,\r\n        // @ts-ignore\r\n        status: state.myProfilePage.status\r\n    }\r\n};\r\nconst ProfileContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {},AppStateType>\r\n(mapStateToProps, {getProfileInfo})(Profile)\r\nexport default ProfileContainer;","\r\nimport React from 'react';\r\nimport s from \"./Category.module.css\";\r\nfunction Category () {\r\n    return(\r\n        <div className={s.category} >\r\n            <h1>Category</h1></div>)\r\n}\r\n\r\nexport default Category;","import {GetUserType, instance, ResponseData} from \"./api\";\r\n\r\nexport const userAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get<GetUserType>(`users?Page=${currentPage}&count=${pageSize}`,)\r\n            .then(response => response.data)\r\n    },\r\n    unfollowAPI: (userID: number) => {\r\n        return instance.delete<ResponseData<{}>>(`follow/${userID}`).then(response => response.data)\r\n    },\r\n    followAPI: (userID: number) => {\r\n        return instance.post<ResponseData<{}>>(`follow/${userID}`).then(response => response.data)\r\n    },\r\n};","import {ResponseData, ResponseResultCode} from \"../api/api\";\r\nimport {UserType} from  \"../types/types\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/users-api\";\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userID: number) => ({type: \"FOLLOW\", userID}  as const),\r\n    unfollowSuccess: (userID: number) => ({type: \"UNFOLLOW\", userID} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const),\r\n    setTotalUsersCount: (totalCount: number) => ({type: \"SET_TOTAL_USERS\", totalCount: totalCount} as const),\r\n    toggleFetching: (isFetching: boolean) => ({type: \"TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userID: number) =>  ({type: \"FOLLOFING_IN_PROGRESS\", isFetching, userID} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 7,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                }),\r\n            };\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                }),\r\n            };\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case \"SET_TOTAL_USERS\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            };\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case \"FOLLOFING_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter(id => id !== action.userID)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number):ThunkType =>\r\n    async (dispatch) => {\r\n    dispatch(actions.toggleFetching(true))\r\n    const response = await userAPI.getUsers(currentPage, pageSize)\r\n    dispatch(actions.setTotalUsersCount(response.totalCount))\r\n    dispatch(actions.setUsers(response.items))\r\n    dispatch(actions.toggleFetching(false))\r\n}\r\n\r\ntype dispatchMethodType = (userID:number)=> ActionsTypes\r\nexport const _followUnfollowFlow = (userID: number, dispatchMethod: dispatchMethodType, response: ResponseData<{}>, dispatch: DispatchType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userID))\r\n    if (response.resultCode === ResponseResultCode.Success) {\r\n        dispatch(dispatchMethod(userID))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userID))\r\n}\r\n\r\nexport const follow = (userID: number):ThunkType => async (dispatch) => {\r\n    const response = await userAPI.followAPI(userID)\r\n    _followUnfollowFlow(userID, actions.followSuccess, response, dispatch)\r\n}\r\nexport const unfollow = (userID: number): ThunkType => async (dispatch) => {\r\n    const response = await userAPI.unfollowAPI(userID)\r\n    _followUnfollowFlow(userID, actions.unfollowSuccess, response, dispatch)\r\n\r\n}\r\n\r\nexport default usersReducer;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Users.module.css\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype UserPropsType = {\r\n    follow: (id:number) => void\r\n    unfollow:(id:number) => void\r\n    followingInProgress:Array<number>\r\n        user: UserType\r\n}\r\n\r\nfunction User(props: UserPropsType) {\r\n    let {follow, unfollow, followingInProgress, user} = props;\r\n    return <div className={s.users}>\r\n                        <span>\r\n                            <NavLink exact to={\"/Profile/\" + user.id}>\r\n                            <div><img\r\n                                src={user.photos.small != null ? user.photos.small : \"https://www.shareicon.net/data/512x512/2016/07/21/799325_user_512x512.png\"}\r\n                                alt=\"No Avatar\"/></div>\r\n                                      </NavLink><div>\r\n                                {user.followed ?\r\n                                    <Button variant=\"contained\" color=\"default\" disabled={followingInProgress.some((id: number) => id === user.id)}\r\n                                            onClick={() => {\r\n                                                unfollow(user.id)\r\n                                            }}>Unfollow</Button> :\r\n                                    <Button variant=\"contained\" color=\"primary\" disabled={followingInProgress.some((id: number) => id === user.id)}\r\n                                            onClick={() => {\r\n                                                follow(user.id)\r\n                                            }}>Follow</Button>}\r\n                            </div>\r\n                        </span>\r\n\r\n        <div>{user.name}</div>\r\n        <div>{user.status}</div>\r\n        <div> {user.id}</div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType= {\r\n    users: Array<UserType>\r\n    follow:(userID: number)=>void\r\n    unfollow:(userID: number)=>void\r\n    followingInProgress:Array<number>\r\n}\r\n\r\n\r\nfunction Users(props: PropsType) {\r\n    let {users, follow, unfollow, followingInProgress} = props;\r\n    return <div className={s.users}>\r\n        <h1>USER LIST</h1>\r\n        {users.map(u => <User key={u.id}\r\n                              user={u}\r\n                              followingInProgress={followingInProgress}\r\n                              unfollow={unfollow}\r\n                              follow={follow}/>)\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport default Users;","import React from 'react';\r\nimport style from \"./hourglass.module.css\"\r\n\r\n\r\nfunction Loading () {\r\n    return <div className={style.ldshourglass}></div>\r\n}\r\n\r\nexport default Loading;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUsers =(state:AppStateType)=>{\r\n    return  state.usersPage.users\r\n}\r\n\r\nexport  const getUsersSuper = createSelector(getUsers, (users)=>{\r\n    return users.filter(u=>true)\r\n})\r\n\r\n\r\nexport  const getPageSize =(state:AppStateType)=>{\r\n    return  state.usersPage.pageSize\r\n}\r\nexport  const getTotalUsersCount =(state:AppStateType)=>{\r\n    return  state.usersPage.totalUsersCount\r\n}\r\nexport  const getCurrentPage =(state:AppStateType)=>{\r\n    return  state.usersPage.currentPage\r\n}\r\nexport  const getIsFetching =(state:AppStateType)=>{\r\n    return  state.usersPage.isFetching\r\n}\r\nexport  const getFollowingInProgress =(state:AppStateType)=>{\r\n    return  state.usersPage.followingInProgress\r\n}\r\n","import React, {useState} from 'react';\r\nimport s from \"./Users.module.css\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    currentPage: number\r\n    portionSize: number\r\n}\r\n\r\nfunction UserPagesCount(props: PropsType) {\r\n    let {totalUsersCount, pageSize, onPageChanged, currentPage, portionSize} = props;\r\n\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pageCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n    return <div className={s.border}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>prev</button>}\r\n        {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={currentPage === p ? s.selected : s.pageNumber} key={p} onClick={(e) => {\r\n                    onPageChanged(p)\r\n                }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>next</button>}\r\n    </div>\r\n}\r\n\r\nexport default UserPagesCount;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    actions,\r\n    unfollow,\r\n    requestUsers\r\n}\r\n    from \"../../Redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport {compose} from \"redux\";\r\nimport Loading from \"../common/Conponents/Loading\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSuper\r\n} from \"../../Redux/users-selectors\";\r\nimport UserPagesCount from \"./Pagenation\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n    setCurrentPage: (p: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userID: number) => void\r\n\r\n\r\n}\r\n\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (p: number) => {\r\n        this.props.getUsersThunkCreator(p, this.props.pageSize)\r\n        this.props.setCurrentPage(p);\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.props.isFetching)\r\n            return <Loading/>;\r\n        return (\r\n            <div>\r\n                <UserPagesCount currentPage={this.props.currentPage}\r\n                                onPageChanged={this.onPageChanged}\r\n                                totalUsersCount={this.props.totalUsersCount}\r\n                                pageSize={this.props.pageSize}\r\n                                portionSize={10}/>\r\n                <Users\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n    (mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage:actions.setCurrentPage,\r\n        toggleFollowingProgress:actions.toggleFollowingProgress,\r\n        getUsersThunkCreator: requestUsers\r\n    }),\r\n)(UsersAPIComponent)\r\n\r\n\r\n","import React from \"react\";\r\nimport {myCreateField} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileDataType} from \"../../../types/types\";\r\n\r\ntype OwnPropsType = {\r\n    profileData:  ProfileDataType\r\n}\r\n\r\n\r\ntype PostFormTypeKeyType = Extract<keyof ProfileDataType, string>\r\n\r\nfunction ProfileDataForm(props: InjectedFormProps<ProfileDataType, OwnPropsType> & OwnPropsType) {\r\n\r\n    let {handleSubmit, profileData, error} = props;\r\n    return <form>\r\n        {error && <div className={style.summaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <button onClick={handleSubmit}>Save</button>\r\n        <div><b>Full nave</b>: {myCreateField<PostFormTypeKeyType>(\"Full Name\", \"fullName\", [], \"input\")} </div>\r\n        <div><b>Looking for a\r\n            job</b>: {myCreateField<PostFormTypeKeyType>(\"\", \"lookingForAJob\", [], \"Input\", {type: \"checkbox\"})}\r\n        </div>\r\n        <div><b>My\r\n            skills</b>: {myCreateField<PostFormTypeKeyType>(\"My skills\", \"lookingForAJobDescription\", [], \"textarea\",)}\r\n        </div>\r\n        <div><b>About me</b>: {myCreateField<PostFormTypeKeyType>(\"About me\", \"aboutMe\", [], \"textarea\")} </div>\r\n        <div><b>Contacts:</b>{Object.keys(profileData.contacts).map((key) => {\r\n            return <div>\r\n                <b> {key} :</b> {myCreateField(key, \"contacts.\" + key, [], \"input\")}\r\n            </div>\r\n\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileDataType, OwnPropsType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm);\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./UserProfile.module.css\"\r\nimport Loading from \"../../common/Conponents/Loading\";\r\nimport {ProfileDataFormRedux} from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileDataType} from \"../../../types/types\";\r\n\r\n\r\ntype UserProfileInfoPropsType = {\r\n    saveProfile: (profile: ProfileDataType) => Promise<any>\r\n    profileData:  ProfileDataType\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n\r\n}\r\n\r\n\r\nfunction UserProfileInfo(props: UserProfileInfoPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    if (!props.profileData) {\r\n        return <Loading/>\r\n    }\r\n    const onSubmit = async (formData: ProfileDataType) => {\r\n        await props.saveProfile(formData)\r\n        setEditMode(false)\r\n    };\r\n\r\n    return <div>\r\n        <img className={s.avatarPhoto}\r\n             src={props.profileData.photos.large || \"https://www.shareicon.net/data/512x512/2016/07/21/799325_user_512x512.png\"}/>\r\n        <div>{props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}</div>\r\n        {editMode ?\r\n            <ProfileDataFormRedux initialValues={props.profileData} {...props} onSubmit={onSubmit}/> :\r\n            <ProfileData {...props} goToEditMode={() => {\r\n                setEditMode(true)\r\n            }}/>}\r\n    </div>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profileData:  ProfileDataType\r\n    isOwner: boolean\r\n    goToEditMode:()=>void\r\n}\r\n\r\nfunction ProfileData(props: ProfileDataPropsType) {\r\n    let {profileData, isOwner, goToEditMode} = props;\r\n\r\n    return <div>\r\n        <h1>{profileData.fullName} </h1>\r\n        <h4>About me: {profileData.lookingForAJobDescription}</h4>\r\n        <div><b>Need work: </b> {profileData.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n        {profileData.lookingForAJob && <div><b>About job:</b> {profileData.lookingForAJobDescription}</div>}\r\n        <div><b>Contacts:</b>{Object.keys(profileData.contacts).map((key) => {\r\n            return <Contacts key={key} contactTitle={key}\r\n                             contactValue={profileData.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n        {isOwner && <button onClick={goToEditMode}>Edit mode</button>}\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType= {\r\n    contactTitle: string\r\n    contactValue?: string\r\n}\r\n\r\nfunction Contacts(props: ContactsPropsType) {\r\n    let {contactTitle, contactValue} = props;\r\n    return <div className={s.contacts}><b>{contactTitle}</b> {contactValue}</div>\r\n}\r\n\r\nexport default UserProfileInfo;\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype UserProfileStatusHooksPropsType = {\r\n    status: \" \" | string\r\n    updateProfileStatus: (status: string) => void\r\n    getProfileStatus: (userId: number | null) => void\r\n}\r\n\r\nfunction UserProfileStatusHooks(props: UserProfileStatusHooksPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deactivatedEditNode = () => {\r\n        setEditMode(false)\r\n        props.updateProfileStatus(status);\r\n    }\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return <div>\r\n        {!editMode &&\r\n        <div><span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span></div>}\r\n        {editMode &&\r\n        <div><input autoFocus={true} onChange={onStatusChange} onBlur={deactivatedEditNode}\r\n                    value={status}/></div>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default UserProfileStatusHooks","import { BaseThunkType, InferActionTypes} from \"./redux-store\";\r\n\r\n\r\n\r\nconst actions = {\r\n    addPostActionCreator: (post: string) => ({type: \"ADD_POST\", post: post} as const),\r\n    postLikeAC: (postID: number) => ({type: \"LIKE_POST\", postID} as const),\r\n    deletePostAC: (postID: number) => ({type: \"DELETE_POST\", postID} as const)\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    postText: string\r\n    postLike: number\r\n    postAvatar: string\r\n}\r\ntype InitialStateType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    postData: [\r\n        {\r\n            id: 1,\r\n            postText: \"So, you want to have a really long race that eventually will attract the best runners from around the world. Unlike other races wute totaling somewhere around 24 to 26 miles\",\r\n            postLike: 2,\r\n            postAvatar: \"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"\r\n        },\r\n        {\r\n            id: 2,\r\n            postText: \"In a nod to Greek history, the first marathon commemorated the run of the soldier Pheidippides from a battlefield near the town of Marathon, Greece, to Athens in 490 B.C.\",\r\n            postLike: 3,\r\n            postAvatar: \"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            postText: \"Despite the success of that first race, it took 13 more years of arguing before the International Amateur Athletic Federatio Olympics, there were six different distances.\",\r\n            postLike: 6,\r\n            postAvatar: \"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"\r\n        },\r\n\r\n    ],\r\n    newPostText: \" \"\r\n};\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nconst postsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            let newPost: PostType = {\r\n                id: state.postData.length + 1,\r\n                postText: action.post,\r\n                postLike: 0,\r\n                postAvatar: \"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"\r\n            };\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost],\r\n                newPostText: \" \"\r\n            };\r\n        case \"LIKE_POST\":\r\n            return {\r\n                ...state,\r\n                postData: state.postData.map(p => {\r\n                    if (p.id === action.postID) {\r\n                        return {...p, postLike: (p.postLike + 1)}\r\n                    }\r\n                    return p\r\n                }),\r\n            };\r\n        case \"DELETE_POST\":\r\n            debugger\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id != action.postID)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default postsReducer;\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes, void>\r\n\r\n\r\nexport const addPostThunk = (post: string):ThunkType => (dispatch) => {\r\n    dispatch(actions.addPostActionCreator(post))\r\n}\r\nexport const postLikeThunk = (userID: number):ThunkType => (dispatch) => {\r\n    dispatch(actions.postLikeAC(userID))\r\n}\r\nexport const deletePost = (userID: number):ThunkType => (dispatch) => {\r\n    dispatch(actions.deletePostAC(userID))\r\n}","import React from \"react\";\r\nimport style from \"./PostItem.module.css\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utilits/validators/validators\";\r\nimport {myCreateField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../Redux/posts-reducer\";\r\n\r\n\r\nconst maxLength10 =maxLengthCreator(15)\r\ntype PostFormTypeKeys = Extract<keyof PostFormType, string>\r\n\r\nconst PostForm:React.FC<InjectedFormProps<PostFormType>> = ({handleSubmit}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            {myCreateField<PostFormTypeKeys>(\"Post\", \"Post\", [required, maxLength10], \"Textarea\",)}\r\n        </div>\r\n        <button> Add post</button>\r\n    </form>\r\n}\r\ntype PostFormType = {\r\n    Post:string\r\n}\r\n\r\nconst ReduxPostForm = reduxForm  <PostFormType>({\r\n    form: 'post'\r\n})(PostForm);\r\n\r\ntype PostItemPropsType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n    isAuth: boolean\r\n    addPostThunk: (post: string) => void\r\n    postLikeThunk: (userID: number) => void\r\n    deletePost: (userID: number) => void\r\n}\r\n\r\nfunction PostItem({isAuth, postData, postLikeThunk, addPostThunk, deletePost}: PostItemPropsType) {\r\n    if (isAuth === false) return <Redirect to={\"/Login\"}/>\r\n    let postElement = postData.map\r\n    (p => <div className={style.post}>\r\n        <div><img alt=\"no\" src={p.postAvatar}/></div>\r\n        <div>{p.postText}</div>\r\n        <div>Like: {p.postLike}</div>\r\n        <button onClick={() => {\r\n            postLikeThunk(p.id)\r\n        }}>\r\n            like\r\n        </button>\r\n        <button onClick={() => {\r\n            deletePost(p.id)\r\n        }}>\r\n            delete\r\n        </button>\r\n    </div>);\r\n\r\n    let onSubmit = (formData: PostFormType) => {\r\n        addPostThunk((formData.Post))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.post}>\r\n                <img alt=\"o\" src=\"https://www.shareicon.net/data/512x512/2016/06/27/787163_people_512x512.png\"/>\r\n                <ReduxPostForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div>\r\n                {postElement}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default PostItem\r\n","import {addPostThunk, deletePost, postLikeThunk, PostType} from \"../../../Redux/posts-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport PostItem from \"./PostItem\";\r\nimport React from \"react\";\r\nimport withAuthRedirect from \"../../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {ProfileDataType} from \"../../../types/types\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPostThunk: (post: string) => void\r\n    postLikeThunk: (userID: number) => void\r\n    deletePost: (userID: number) => void\r\n\r\n}\r\n\r\n\r\nfunction PostContainerAPI(props: MapStateToPropsType & MapDispatchToPropsType) {\r\n    return <PostItem {...props}/>\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\r\n    return {\r\n        postData: state.postPage.postData,\r\n        newPostText: state.postPage.newPostText,\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\n\r\nconst PostContainer = compose<React.ComponentType> (connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n    (mapStateToProps, {addPostThunk, postLikeThunk, deletePost}),\r\n    withAuthRedirect)\r\n(PostContainerAPI)\r\n\r\nexport default PostContainer","import React from 'react';\r\nimport s from \"./UserProfile.module.css\"\r\nimport UserProfileInfo from \"./UserProfileInfo\";\r\nimport UserProfileStatusHooks from \"./UserProfileStatusHooks\";\r\nimport PostContainer from \"../../Posts/PostsItem/PostItemContainer\"\r\nimport {ProfileDataType} from \"../../../types/types\";\r\n\r\ntype UserProfilePropsType = {\r\n    saveProfile: (profile: ProfileDataType) => Promise<any>\r\n    profileData: ProfileDataType\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    status: \" \" | string\r\n    updateProfileStatus: (status: string) => void\r\n    getProfileStatus: (userId: number | null) => void\r\n}\r\n\r\n\r\nfunction UserProfile(props: UserProfilePropsType) {\r\n\r\n\r\n    return <div className={s.profile}>\r\n        <UserProfileInfo\r\n            saveProfile={props.saveProfile}\r\n            profileData={props.profileData}\r\n            isOwner={props.isOwner}\r\n            savePhoto={props.savePhoto}/>\r\n        <UserProfileStatusHooks status={props.status}\r\n                                updateProfileStatus={props.updateProfileStatus}\r\n                                getProfileStatus={props.getProfileStatus}/>\r\n        <PostContainer/>\r\n    </div>\r\n}\r\n\r\nexport default UserProfile;\r\n","import {connect} from \"react-redux\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport React from \"react\";\r\nimport {\r\n    getProfileInfo,\r\n    getProfileStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateProfileStatus\r\n} from \"../../../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataType} from \"../../../types/types\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToProps = {\r\n    getProfileStatus: (userId: number| null)=>void\r\n    updateProfileStatus: (status: string)=>void\r\n    getProfileInfo: (userId: number|null)=>void\r\n    savePhoto: (file: File)=>Promise<any>\r\n    saveProfile: (profile: ProfileDataType)=>Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToProps & RouteComponentProps<PathParamsType>;\r\n\r\nclass MyProfileContainerAPI extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number|null = +this.props.match.params.userID;\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileInfo(userId);\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsType, prevState:PropsType) {\r\n        if (this.props.status != prevProps.status) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <UserProfile\r\n            saveProfile={this.props.saveProfile}\r\n            savePhoto={this.props.savePhoto}\r\n            isOwner={!this.props.match.params.userID}\r\n            profileData={this.props.profileData}\r\n            status={this.props.status}\r\n            updateProfileStatus={this.props.updateProfileStatus}\r\n            getProfileStatus={this.props.getProfileStatus}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        // @ts-ignore\r\n        profileData: state.myProfilePage.profileData,\r\n        // @ts-ignore\r\n        status: state.myProfilePage.status,\r\n        authUserId: state.auth.userID\r\n    }\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileStatus, updateProfileStatus, getProfileInfo, savePhoto, saveProfile}),\r\n    withRouter)\r\n(MyProfileContainerAPI)\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./News.module.css\"\r\n\r\ntype NewsPropsType = {\r\n    newsData: Array<{\r\n        title:string\r\n    }>\r\n}\r\n\r\nfunction News(props: NewsPropsType) {\r\n    let {newsData} = props;\r\n    return <div className={s.news}>\r\n        <h1>News!</h1>\r\n        {newsData.map(n => <div>{n.title}</div>)}\r\n    </div>\r\n}\r\n\r\nexport default News;","import {connect} from \"react-redux\";\r\nimport News from \"./News\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    newsData: Array<{\r\n        title: string\r\n    }>\r\n}\r\n\r\nfunction NewsContainerAPI(props: MapStateToPropsType) {\r\n    return <News newsData={props.newsData}/>\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        newsData: state.newsPage.newsData,\r\n    }\r\n};\r\n\r\n\r\nlet NewsContainer = connect<MapStateToPropsType, {}, {}, AppStateType>\r\n(mapStateToProps, {})(NewsContainerAPI);\r\n\r\n\r\nexport default NewsContainer;\r\n","import React from 'react';\r\nimport s from \"./../Events.module.css\"\r\nimport {EventDataType} from \"../EventContainer\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\ntype ItemType = {\r\n    id: number\r\n    text: string\r\n    poster: string\r\n    type: string\r\n    addEvent: (eventID: number, evText: string) => void\r\n}\r\n\r\nfunction Item(props: ItemType) {\r\n    let {poster, text, id, addEvent} = props;\r\n    return <div>\r\n        <Paper elevation={3} style={{margin:\"10px\", padding:\"10px\"}}>\r\n            <img alt=\"0\" src={poster}/>\r\n            <div>{text}</div>\r\n            <div>\r\n                <Button id=\"addEvent\" color=\"primary\" onClick={() => addEvent(id, text)} variant=\"contained\">Accept\r\n                    Event</Button>\r\n            </div>\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nexport function FullMarathonsItems(props: EventsItemsType) {\r\n    let {eventData, addEvent} = props;\r\n    return <div>\r\n        <div className={s.eventItem}>\r\n            {eventData.filter(ev => ev.type === \"full\").map(ev => <Item {...ev} addEvent={addEvent}/>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport function Marathons5kmItems(props: EventsItemsType) {\r\n    let {eventData, addEvent} = props;\r\n    return <div>\r\n        <div className={s.eventItem}>\r\n            {eventData.filter(ev => ev.type === \"5km\").map(ev => <Item {...ev} addEvent={addEvent}/>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport function Marathons10kmItems(props: EventsItemsType) {\r\n    let {eventData, addEvent} = props;\r\n    return <div>\r\n        <div className={s.eventItem}>\r\n            {eventData.filter(ev => ev.type === \"10km\").map(ev => <Item {...ev} addEvent={addEvent}/>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport function HalfMarathonsItems(props: EventsItemsType) {\r\n    let {eventData, addEvent} = props;\r\n    return <div>\r\n        <div className={s.eventItem}>\r\n            {eventData.filter(ev => ev.type === \"half\").map(ev => <Item {...ev} addEvent={addEvent}/>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype EventsItemsType = {\r\n    eventData: EventDataType\r\n    addEvent: (eventID: number, evText: string) => void\r\n}\r\n\r\nexport function AllEventsItems(props: EventsItemsType) {\r\n    let {eventData, addEvent} = props;\r\n    return <div className={s.eventItem}>\r\n        {eventData.map(ev => <Item {...ev} addEvent={addEvent}/>)}\r\n    </div>\r\n}\r\n","import { BaseThunkType, InferActionTypes} from \"./redux-store\";\r\n\r\n\r\nexport type EventType = {\r\n    id: number\r\n    text: string\r\n    poster: string\r\n    type: string\r\n}\r\n\r\n\r\nexport const action = {\r\n    addEvent: (eventID:number, evText:string) => ({type: \"ADD_EVENT\", eventID: eventID, evText: evText} as const),\r\n    clean : () => ({type: \"CLEAN\"} as const)\r\n}\r\n\r\nlet initialState = {\r\n    eventData: [\r\n        {\r\n            id: 1,\r\n            text: \"Trail Voskresinitska gora\",\r\n            poster: \"https://image.freepik.com/free-vector/_21856-1.jpg\",\r\n            type: \"full\"\r\n        },\r\n        {\r\n            id: 2,\r\n            text: \"Blue Lake Cup Spring 2020\",\r\n            poster: \"https://sportevent.com.ua/image/t/250/250/img/1574/662.png\",\r\n            type:\"5km\"\r\n        },\r\n        {\r\n            id: 3,\r\n            text: \"Kharkiv Half Marathon 2020\",\r\n            poster: \"https://sportevent.com.ua/image/t/250/250/img/1464/630.jpg\",\r\n            type: \"full\"\r\n        },\r\n        {\r\n            id: 4,\r\n            text: \"4th RAIN Mohrytsia Eco Trail 2020\",\r\n            poster: \"https://sportevent.com.ua/image/t/250/250/img/1568/656.jpg\",\r\n            type: \"10km\"\r\n        },\r\n        {\r\n            id: 5,\r\n            text: \"Sumy Duathlon 27.5\",\r\n            poster: \"https://saycheese.com.ua/wp-content/uploads/2020/03/photo_2020-03-26-17.05.36.jpeg\",\r\n            type: \"10km\"\r\n        },\r\n        {\r\n            id: 6,\r\n            text: \"Blue Lake Cup Spring 2020\",\r\n            poster: \"https://www.active.net.ua/wp-content/uploads/2017/10/RAIN-Mohrytsia-Eco-Trail-2020.jpg\",\r\n            type: \"half\"\r\n        },\r\n        {\r\n            id: 7,\r\n            text: \"Kharkiv International Marathon\",\r\n            poster: \"https://www.active.net.ua/wp-content/uploads/2016/12/Kharkiv-International-Marathon.jpg\",\r\n            type: \"half\"\r\n        },\r\n        {\r\n            id: 8,\r\n            text: \"4th RAIN Mohrytsia Eco Trail 2020\",\r\n            poster: \"https://image.shutterstock.com/image-vector/running-marathon-people-run-colorful-600w-633344339.jpg\",\r\n            type: \"full\"\r\n        },],\r\n    myEvents: [] as Array<string>\r\n};\r\ntype initialStateType= typeof initialState\r\ntype ActionsTypes= InferActionTypes<typeof action>\r\n\r\nconst eventsReducer = (state = initialState, action:ActionsTypes)=> {\r\n    switch (action.type) {\r\n        case \"ADD_EVENT\":\r\n            state.eventData.map((i) => {\r\n                if (action.eventID === i.id) {\r\n                    state.myEvents.push(action.evText)\r\n                }\r\n            });\r\n            return {\r\n                ...state, myEvents: [...state.myEvents]\r\n            };\r\n        case \"CLEAN\":\r\n            return {\r\n                ...state, myEvents: []\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes, void>\r\n\r\nexport const cleanThunk=():ThunkType=>(dispatch)=>{\r\n    dispatch(action.clean())\r\n}\r\n\r\nexport default eventsReducer;","import React from 'react';\r\nimport s from \"./../Events.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction EventHeader() {\r\n    return <div className={s.eventHeader}>\r\n        <NavLink exact to=\"/Events/Full-Marathons\" activeClassName={s.active}>Full Marathons</NavLink>\r\n        <NavLink to=\"/Events/Half-Marathons\" activeClassName={s.active}>Half Marathons</NavLink>\r\n        <NavLink to=\"/Events/10km-Marathons\" activeClassName={s.active}>10km Runs</NavLink>\r\n        <NavLink to=\"/Events/5km-Marathons\" activeClassName={s.active}>5km Runs</NavLink>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default EventHeader;","import React from 'react';\r\nimport s from \"./../Events.module.css\"\r\n\r\nfunction EventFilter() {\r\n    return <div className={s.eventFilter}>\r\n        <div>Event Filter</div>\r\n        <div>Price:</div>\r\n        <input id=\"input\" type=\"range\" min=\"100\" max=\"200\" step=\"2\"/>\r\n        <div>Difficulty:</div>\r\n        <input id=\"input\" type=\"range\" min=\"100\" max=\"200\" step=\"2\"/>\r\n        <div>Rating:</div>\r\n        <input id=\"input\" type=\"range\" min=\"100\" max=\"200\" step=\"2\"/>\r\n        <div>\r\n            <button>\r\n                Find Events\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default EventFilter;","import React from 'react';\r\nimport {\r\n    AllEventsItems,\r\n    FullMarathonsItems,\r\n    HalfMarathonsItems,\r\n    Marathons10kmItems,\r\n    Marathons5kmItems,\r\n} from \"./Event/EventsItems\";\r\nimport {connect} from \"react-redux\";\r\nimport {action} from \"../../Redux/events-reducer\";\r\nimport s from \"./Events.module.css\";\r\nimport EventHeader from \"./Event/EventHeader\";\r\nimport EventFilter from \"./Event/EventFilter\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\nexport type EventDataType = Array<{\r\n    id: number\r\n    text: string\r\n    poster: string\r\n    type: string\r\n}>\r\n\r\ntype MapStateToPropsType= {\r\n    eventData: EventDataType\r\n    myEvents: Array<{}>\r\n}\r\n\r\nexport type AddEventType ={\r\n    addEvent: (eventID:number, evText:string)=>void\r\n}\r\ntype MapDispatchToPropsType=AddEventType\r\n\r\nfunction EventItemContainerAPI(props: MapStateToPropsType & MapDispatchToPropsType) {\r\n    return <div className={s.eventContent}>\r\n        <EventFilter/>\r\n        <EventHeader/>\r\n        <div className=\"events-content\">\r\n            <Switch>\r\n                <Route exact path=\"/Events\" render={() => (<AllEventsItems {...props}/>)}/>\r\n                <Route exact path=\"/Events/Half-Marathons\" render={() => (<HalfMarathonsItems {...props}/>)}/>\r\n                <Route exact path=\"/Events/Full-Marathons\" render={() => (<FullMarathonsItems {...props}/>)}/>\r\n                <Route exact path=\"/Events/10km-Marathons\" render={() => (<Marathons10kmItems {...props}/>)}/>\r\n                <Route exact path=\"/Events/5km-Marathons\" render={() => (<Marathons5kmItems {...props}/>)}/>\r\n            </Switch>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        eventData: state.eventPage.eventData,\r\n        myEvents: state.eventPage.myEvents,\r\n    }\r\n};\r\n\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState>\r\nconst EventContainer = connect<MapStateToPropsType, MapDispatchToPropsType,{},AppStateType>(mapStateToProps, {addEvent:action.addEvent})(EventItemContainerAPI);\r\nexport default EventContainer;\r\n\r\n","import React from 'react';\r\nimport s from \"./MyEvent.module.css\"\r\n\r\ntype MyEventItemPropsType = {\r\n    myEvents: Array<{}>\r\n    cleanThunk: () => void\r\n}\r\n\r\nfunction MyEventItem(props: MyEventItemPropsType) {\r\n    let {myEvents, cleanThunk} = props;\r\n    return <div className={s.event}>\r\n        <h2>My Events:</h2>\r\n        {myEvents.map((e) => (<li>{[e]} </li>))}\r\n        {myEvents.length === 0 ? null : <button onClick={() => cleanThunk()}>Clean</button>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default MyEventItem;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MyEventItem from \"./MyEventItem\";\r\nimport {cleanThunk, EventType} from \"../../Redux/events-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    eventData: Array<EventType>\r\n    myEvents: Array<{}>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    cleanThunk: ()=>void\r\n}\r\n\r\nfunction MyEventItemContainerAPI(props: mapStateToPropsType & mapDispatchToPropsType) {\r\n    return <MyEventItem\r\n        myEvents={props.myEvents}\r\n        cleanThunk={props.cleanThunk}\r\n    />\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        myEvents: state.eventPage.myEvents,\r\n        eventData: state.eventPage.eventData\r\n    }\r\n};\r\n\r\n\r\nconst MyEventContainer = connect  <mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {cleanThunk})(MyEventItemContainerAPI);\r\nexport default MyEventContainer;\r\n\r\n","import React from 'react';\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nfunction HeaderMenu() {\r\n    return (\r\n        <div className={s.search}>\r\n            <div className={s.menu}><NavLink to=\"/Events\" activeClassName={s.active}>Events </NavLink>\r\n                <NavLink to=\"/Users\" activeClassName={s.active}>People</NavLink>\r\n                <NavLink to=\"/News\" activeClassName={s.active}>News</NavLink>\r\n                <NavLink to=\"/Search\" activeClassName={s.active}>Search</NavLink>\r\n                <NavLink to=\"/Store\" activeClassName={s.active}>Store</NavLink>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\ntype HeaderPropsType = {\r\n    singOutThunk: (email: string|null, password: string|null, captcha: string|null)=>void\r\n    login: null | string\r\n    isAuth: boolean\r\n}\r\n\r\nfunction Header({isAuth, login, singOutThunk}: HeaderPropsType) {\r\n    return (\r\n        <div className={s.header}>\r\n            <div className={s.headerText}>iRunner</div>\r\n            <HeaderMenu/>\r\n            {isAuth ? <div className={s.login}>\r\n                    <div>\r\n                        <div></div>\r\n                        {login}</div>\r\n                    <Button onClick={() => {\r\n                        singOutThunk(null, null, null)\r\n                    }} variant=\"contained\">logout</Button>\r\n                </div> :\r\n                <NavLink to={\"/login\"}>\r\n                    <div className={s.login}>Login</div>\r\n                </NavLink>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import {AuthMeType, instance, ResponseData} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseData<AuthMeType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login: (email: string, password: string, captcha: string) => {\r\n        return instance.post<ResponseData<{ userId: number }>>(`/auth/login`, {email, password, captcha})\r\n            .then(response =>response.data)\r\n    },\r\n    logout: () => {\r\n        return instance.delete<ResponseData<{}>>(`/auth/login`).then((response) =>response)\r\n    },\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`)\r\n    }\r\n}","import {ResponseResultCode} from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\n\r\nexport const actions = {\r\n     setAuthUserData: (userID: number | null, email: string | null, login: string | null, isAuth: boolean) => ({type: \"SET_USER_DATA\", data: {userID, email, login, isAuth}}as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: \"GET_CAPTCHA_URL_SUCCESS\", captchaUrl: captchaUrl} as const)\r\n}\r\n\r\nlet initialState = {\r\n    userID: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    captchaUrl: null as null | string\r\n};\r\n\r\ntype InitialStateType = typeof  initialState\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            debugger\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl,\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes| FormAction>\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n        let meData = await authAPI.me()\r\n        if (meData.resultCode === ResponseResultCode.Success) {\r\n            dispatch(actions.setAuthUserData(meData.data.id, meData.data.email, meData.data.login, true))\r\n        }\r\n    }\r\n\r\nexport const singInThunk = (email: string, password: string, captcha: string):ThunkType => async (dispatch) => {\r\n    const loginData = await authAPI.login(email, password, captcha);\r\n    if (loginData.resultCode === ResponseResultCode.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === ResponseResultCode.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let massage = loginData.messages.length>0?loginData.messages[0]:\"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: massage}))\r\n    }\r\n}\r\nexport const singOutThunk = ():ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === ResponseResultCode.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n};\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {singOutThunk} from \"../../Redux/auth-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    userID?: null | number\r\n    email?: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n    captchaUrl?: null | string\r\n}\r\n\r\ntype mapDispatchToPropsType =  {\r\n    singOutThunk: (email: string|null, password: string|null, captcha: string|null)=>void\r\n}\r\n\r\ntype HeaderContainerContainerType = mapStateToPropsType&mapDispatchToPropsType\r\n\r\nfunction HeaderContainerIPA(props: HeaderContainerContainerType) {\r\n    return <Header {...props}/>\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => ({\r\n    isAuth:  state.auth.isAuth,\r\n    login:  state.auth.login,\r\n\r\n});\r\n\r\nconst HeaderContainer = connect <mapStateToPropsType, mapDispatchToPropsType,{}, AppStateType>\r\n(mapStateToProps, {singOutThunk})(HeaderContainerIPA)\r\n\r\nexport default HeaderContainer;","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {singInThunk, singOutThunk} from \"../../Redux/auth-reducer\";\r\nimport {Input, myCreateField} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utilits/validators/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\nlet maxLength40 = maxLengthCreator(40)\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nfunction LoginForm(props: InjectedFormProps<LoginFormDataType, LoginFormOwnProps> & LoginFormOwnProps) {\r\n    let {handleSubmit, error, captchaUrl} = props;\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        {myCreateField<LoginFormDataTypeKeys>(\"Email\", \"Email\", [required, maxLength40], \"Input\",)}\r\n        {myCreateField<LoginFormDataTypeKeys>(\"Password\", \"Password\", [required, maxLength40], \"Input\", {type: \"password\"})}\r\n        {myCreateField<LoginFormDataTypeKeys>(undefined, \"rememberMe\", [], \"Input\", {type: \"checkbox\"}, \"remember me\")}\r\n\r\n        {error && <div className={style.summaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        {captchaUrl && <img src={captchaUrl}/>}\r\n        {captchaUrl && myCreateField(\"Symbols from img\", \"captcha\", [required], \"input\")}\r\n\r\n        <div>\r\n            <button>login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<LoginFormDataType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    singOutThunk: (email: string, password: string, captcha: string) => void\r\n    singInThunk: (email: string, password: string, captcha: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginFormDataType = {\r\n    Email: string\r\n    Password: string\r\n    captcha: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginFormDataTypeKeys = Extract<keyof LoginFormDataType, string>\r\n\r\nfunction Login(props: mapStateToPropsType & mapDispatchToPropsType) {\r\n\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        props.singInThunk(formData.Email, formData.Password, formData.captcha, formData.rememberMe);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/Profile\"}/>;\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <ReduxLoginForm\r\n            onSubmit={onSubmit}\r\n            captchaUrl={props.captchaUrl}/>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        captchaUrl: state.auth.captchaUrl,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nconst connectedUsersAPIComponent = compose(connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {singInThunk, singOutThunk}))(Login)\r\n\r\nexport default connectedUsersAPIComponent","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionTypes} from \"./redux-store\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: \"INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n\r\ntype InitialStateType= typeof initialState\r\nconst appReducer = (state = initialState, action:ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n\r\n\r\nexport const initializeApp = ():ThunkType => async (dispatch)=> {\r\n    await dispatch(getAuthUserData())\r\n    await dispatch(actions.initializedSuccess())\r\n};\r\n\r\nexport default appReducer;","\r\nlet initialState = {\r\n    newsData: [\r\n        {title: \"News will be here\"}\r\n    ]\r\n}\r\n\r\n\r\ntype NewsReducerStateType = typeof initialState\r\nconst newsReducer = (state= initialState, action: any): NewsReducerStateType => {\r\n    return state\r\n};\r\nexport default newsReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport postsReducer from \"./posts-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport eventsReducer from \"./events-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport myProfileReducer from \"./profile-reducer\";\r\nimport newsReducer from \"./news-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\nlet rootReducers = combineReducers(\r\n    {\r\n        postPage: postsReducer,\r\n        dialogPage: dialogReducer,\r\n        eventPage: eventsReducer,\r\n        usersPage: usersReducer,\r\n        myProfilePage: myProfileReducer,\r\n        newsPage: newsReducer,\r\n            auth: authReducer,\r\n        form: formReducer,\r\n        app: appReducer\r\n    }\r\n);\r\n\r\ntype RootReducersType = typeof rootReducers\r\nexport type AppStateType = ReturnType<RootReducersType>\r\n\r\n\r\nexport type InferActionTypes<T> = T extends {[key: string]: (...args:any[])=>infer U} ? U: never\r\n\r\nexport type BaseThunkType<A extends Action, R= Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\nexport default store;","import React from \"react\";\r\n\r\nfunction Calc() {\r\n    return <div>Will be soon...or not...</div>\r\n}\r\n\r\n\r\nexport default  Calc","import React, {Suspense} from \"react\";\r\nimport Loading from \"../components/common/Conponents/Loading\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent:React.ComponentType<WCP>) {\r\n    return (props:WCP) => {\r\n        return <Suspense fallback={<Loading/>}>\r\n            <WrappedComponent{...props}/>\r\n        </Suspense>\r\n    }\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Profile from \"./components/Profile-menu/Profile\";\r\nimport Category from \"./components/Category/Category\";\r\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport UserProfileContainer from \"./components/Users/UserProfile/UserProfileContainer\";\r\nimport NewsContainer from \"./components/News/NewsContainer\";\r\nimport EventContainer from \"./components/Events/EventContainer\";\r\nimport MyEventContainer from \"./components/MyEvents/MyEventContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderConteiner\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redux/app-reducer\";\r\nimport Loading from \"./components/common/Conponents/Loading\";\r\nimport store, {AppStateType} from \"./Redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/Suspense\";\r\nimport Calc from \"./components/Store/Store\";\r\nimport PostContainer from \"./components/Posts/PostsItem/PostItemContainer\";\r\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToPropsType = {\r\n    initializeApp:()=>void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    catchAllUnhandledErrors:()=>void\r\n}\r\n\r\nconst SuspendedDialog = withSuspense(DialogsContainer)\r\n\r\nclass App extends React.Component<MapStateToPropsType&MapDispatchToPropsType&OwnPropsType> {\r\n    catchAllUnhandledErrors=(e:PromiseRejectionEvent )=>{\r\n        alert(e.reason);\r\n    };\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors )\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors )\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Loading/>\r\n        }\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <HeaderContainer/>\r\n                <Profile/>\r\n                <Category/>\r\n                <div className=\"wrapper-content\">\r\n                    <Switch>\r\n                    <Redirect exact from=\"/\"  to=\"/Profile\" />\r\n                    <Route exact path=\"/Profile/:userID?\" render={() => (<UserProfileContainer/>)}/>\r\n                    <Route path=\"/Events\" render={() => (<EventContainer/>)}/>\r\n                    <Route exact path=\"/Dialogs\" render={()=><SuspendedDialog/>}/>\r\n                    <Route exact path=\"/Posts\" render={() => (<PostContainer/>)}/>\r\n                    <Route exact path=\"/Users\" render={() => (<UsersContainer/>)}/>\r\n                    <Route exact path=\"/News\" render={() => (<NewsContainer/>)}/>\r\n                    <Route exact path=\"/Login\" render={() => (<Login/>)}/>\r\n                        <Route exact path=\"/Store\" render={() => (<Calc/>)}/>\r\n                    <Route exact path=\"*\" render={() => <h1>Error 404 </h1>}/>\r\n                    </Switch>\r\n                </div>\r\n                <MyEventContainer/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType,{},AppStateType>(mapStateToProps, {initializeApp})\r\n)(App);\r\n\r\n\r\nconst SocialNetworkApp:React.FC = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n};\r\n\r\nexport default SocialNetworkApp\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport SocialNetworkApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<SocialNetworkApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__1pB6I\",\"border\":\"Users_border__2s6YD\",\"pageNumber\":\"Users_pageNumber__2HAxu\",\"selected\":\"Users_selected__5u5h6\"};","\r\nexport type FieldValidatorType = (value:string)=>string|undefined\r\n\r\nexport const required:FieldValidatorType = (value) =>{\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n};\r\n\r\nexport const maxLengthCreator =(maxLength:number):FieldValidatorType=> (value) =>{\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Q3JxI\",\"error\":\"FormsControls_error__ZNhiI\",\"summaryError\":\"FormsControls_summaryError__2rnlI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarPhoto\":\"UserProfile_avatarPhoto__2QmFS\",\"contacts\":\"UserProfile_contacts__36C1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__SH6dT\",\"active\":\"Profile_active__ws1tZ\"};"],"sourceRoot":""}